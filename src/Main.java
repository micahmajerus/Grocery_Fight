import java.util.ArrayList;
import java.util.Scanner;
import java.util.Random;


public class Main {
    public static void main(String[] args) {
        String border = "-----------------------------------\n";

        Carrot Carrot1 = new Carrot("Mike", 100);
        Carrot Carrot2 = new Carrot("Micah", 80);
        Carrot Carrot3 = new Carrot("Niko", 90);

        // Creating our array list to hold all of our produce
        ArrayList<Produce> Produce_Object_List = new ArrayList<>();
        Produce_Object_List.add(Carrot1);
        Produce_Object_List.add(Carrot2);
        Produce_Object_List.add(Carrot3);

        Produce resultObject = null;
        while (Produce_Object_List.stream().filter(obj -> obj.getHealth() > 0).count() > 1) {
            for (Produce obj : Produce_Object_List) {
                if (obj.getHealth() > 0) {
                    if (resultObject == null) {

                        resultObject = obj;
                    } else {
                        Random random = new Random();
                        Produce Object1 = null;
                        Produce Object2 = null;
                        // ------------Choosing the next produce to battle----------------------------------------------------------------
                        while (Object1 == null || Object2 == null) {
                            int randomIndex = random.nextInt(Produce_Object_List.size());
                            Produce selectedObject = Produce_Object_List.get(randomIndex);

                            if (selectedObject.getHealth() > 0) {
                                if (Object1 == null) {
                                    Object1 = selectedObject;
                                } else if (Object2 == null && !selectedObject.equals(Object1)) {
                                    Object2 = selectedObject;
                                }
                            }
                        }
                        System.out.println(border + "Up next is, " + Object1.getName() + " VS. " + Object2.getName() + "!");
                        // ------------Battle (Including user choose)-----------------------
                        // Doing Object1 actions
                        int userChoice1 = getUserChoice(Object1);
                        perform_chosen_action(userChoice1, Object1, Object2);

                        // Doing tObject2 actions
                        int userChoice2 = getUserChoice(Object2);
                        perform_chosen_action(userChoice2, Object2, Object1);


                        // ----------Display results-----------------------------------------
                        System.out.println("\n" + Object1.getName() + " now has " + Object1.getHealth() + " health points, and "
                                + Object2.getName() + " now has " + Object2.getHealth() + " health points");

                        // Both objects have health greater than 0, so the loop continues

                        resultObject = null;

                    }
                }
            }
        }

        // Game end
        for (Produce obj : Produce_Object_List) {
            if (obj.getHealth() > 0) {
                System.out.println(border + border + "The winner is " + obj.getName() + "! \n" + border  + border);
            }
        }
        System.out.println(Carrot1.getName() + " ended with " + Carrot1.getHealth());
        System.out.println(Carrot2.getName() + " ended with " + Carrot2.getHealth());
        System.out.println(Carrot3.getName() + " ended with " + Carrot3.getHealth());

    } // End of main

    /**
     * This function performs the action that the user choose.
     * @param userChoice - The users choice of action generated by getUserChoice()
     * @param UserProduce - The player
     * @param OpponentProduce - The opponent
     */
    public static void perform_chosen_action(int userChoice, Produce UserProduce, Produce OpponentProduce) {
        String border = "-----------------------------------";
        switch (userChoice) {
            case 1:
                UserProduce.attack(OpponentProduce);
                System.out.println(border);
                break;
            case 2:
                UserProduce.heal(UserProduce);
                System.out.println(border);
                break;
            case 3:
                UserProduce.give_up(UserProduce);
                System.out.println(border);
                break;
            case 4:
                UserProduce.special_move(OpponentProduce, UserProduce);
                System.out.println(border);
                break;
            default:
                System.out.println("An error occurred, exciting program");
                System.exit(0);
        }
    }

    /**
     * This function get the action that the user wants to perform
     * @param currentProduce - Produce - Whoever turn it is to go.
     * @return userChoice - int - Number corresponds for a move type that will be executed.
     */
    public static int getUserChoice(Produce currentProduce){
        String border = "\n-----------------------------------";
        Scanner input = new Scanner(System.in);

        String[] list_options = {
                "Attack",
                "Heal",
                "Give Up",
                "Special Move"
        };

        System.out.println("Select an option for " + currentProduce.getName());

        // Display options with corresponding numbers
        for (int i = 0; i < list_options.length; i++) {
            System.out.println((i + 1) + ". " + list_options[i]);
        }

        System.out.print("Enter the number of your choice: ");

        // Validate user input
        int userChoice = 0;
        while (true) {
            if (input.hasNextInt()) {
                userChoice = input.nextInt();
                if (userChoice >= 1 && userChoice <= list_options.length) {
                    break;
                } else {
                    System.out.print("Invalid input. Please enter a number between 1 and " + list_options.length + ": ");
                }
            } else {
                System.out.print("Invalid input. Please enter a number: ");
                input.next(); // Consume invalid input
            }
        }

        // Display the chosen option
        System.out.println(currentProduce.getName() + " will: " + list_options[userChoice - 1] + border);

        return userChoice;
    }
}